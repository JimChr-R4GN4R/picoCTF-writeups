from Crypto.Util.number import inverse, long_to_bytes
 
c = 10700126716619829072748057212031379644817808986162784177172158043260620517065185856420635356633907304635148318815853188110462344063950843152585528823662467837098118179231725941959697329138623200523118493837900598567339160268679336672242136950006904143758178426411145915041024926666404769754489927622855493862441306351807922721387472475638195598

n = 24938457134014251947760215232231240858089555951274898334541645199426960173289721454316028006118465761239398440209969567610064334798636281965141268459339760693400500925167193360126927502422565650305101641046680875991392193394126604603117480280465414032260934009801025288645550498990823662993806653894032313503725806735887165496773939418890718783

e = 65537
 
n_factors = "8865 023599 × 8895 222257 × 8906 680087 × 8942 036561 × 9232 986701 × 9698 406533 × 9845 071829 × 10204 713359 × 10254 526433 × 10677 505151 × 10893 443047 × 11178 642829 × 11618 890061 × 12308 356519 × 12378 849811 × 12418 086097 × 12689 374807 × 12868 219289 × 13594 056127 × 13713 998279 × 13749 759701 × 14214 123367 × 14401 600729 × 14990 258813 × 15075 630931 × 15241 400543 × 15816 772721 × 15928 218569 × 16065 897671 × 16252 022953 × 16289 930567 × 16342 707947 × 17029 421369 × 17109 252703".replace(" ", "").replace('*','×').split("×") # copy the results from https://www.alpertron.com.ar/ECM.HTM by factoring n

phi = 1

for i in n_factors: # At every loop, i is equal with every n's factor
	
	phi *= (int(i) - 1) # phi = phi * (p - 1)
	
	d = inverse(e, phi) # d = e^(-1) MOD phi
	
	##################################################
	#print("\033[95mfactor:",factors[l])            ##
	#print("\033[94mphi:",phi)                      #### If you want to see in real time what is going on, just remove '#'
	#print("\033[91md:",d)                          ##
	#print("\033[0m############################")   ##
	##################################################
	

print(long_to_bytes(pow(c, d, n)).decode()) # convert from decimal to hex and then to ascii

################################## Useful sources for the script ##################################
#https://github.com/Dvd848/CTFs/blob/master/2018_picoCTF/Super%20Safe%20RSA%203.md

