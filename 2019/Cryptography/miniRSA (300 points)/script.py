from subprocess import call

try:
    import gmpy2
except:
    print("I will install gmpy2 module...")
    print("################################# INSTALLING #################################")
    install_gmpy2 = call("sudo apt-get install python3-gmpy2", shell=True)
    print("################################# INSTALLED #################################")


from Crypto.Util.number import long_to_bytes

gmpy2.get_context().precision=2048

n = 29331922499794985782735976045591164936683059380558950386560160105740343201513369939006307531165922708949619162698623675349030430859547825708994708321803705309459438099340427770580064400911431856656901982789948285309956111848686906152664473350940486507451771223435835260168971210087470894448460745593956840586530527915802541450092946574694809584880896601317519794442862977471129319781313161842056501715040555964011899589002863730868679527184420789010551475067862907739054966183120621407246398518098981106431219207697870293412176440482900183550467375190239898455201170831410460483829448603477361305838743852756938687673
e = 3
ciphertext = 2205316413931134031074603746928247799030155221252519872649602375643231006596573791863783976856797977916843724727388379790172135717557077760267874464115099065405422557746246682213987550407899612567166189989232143975665175662662107329564517

plaintext = gmpy2.root(ciphertext, e)

plaintext_2 = pow(plaintext,e)

if (plaintext_2 == ciphertext):
    print("This vulnerability is working with these variables!\n")
    print(long_to_bytes(plaintext).decode())
else:
    print("This vulnerability is not working with these variables :(")
